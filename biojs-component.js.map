{"version":3,"sources":["biojs-component.es6.js"],"names":[],"mappings":"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","file":"biojs-component.js","sourcesContent":["System.import('../../d3/d3.min.js').then(function() {\n  new BioJSComponent();\n});\n\nclass BioJSComponent {\n  constructor() {\n    Polymer(BioJSComponent.prototype);\n  }\n\n  // Component Name\n  get is() {\n    return 'biojs-component';\n  }\n\n  // Component Properties\n  get properties() {\n    return {\n      /**\n      * Sets the url where to fetch the data\n      *\n      * @type {String}\n      */\n      url: {\n        type: String\n      },\n\n      /**\n      * Sets the margins of the graph\n      *\n      * @type {top: Number, right: Number, bottom: Number, left: Number}\n      */\n      margin: {\n        type: Object,\n        value: () => ({\n          top: 20, right: 20, bottom: 30, left: 40\n        })\n      },\n\n      /**\n      * Sets the width of the graph\n      *\n      * @type {Number}\n      */\n      width: {\n        type: Number,\n        value: 960\n      },\n\n      /**\n      * Sets the height of the graph\n      * @type {Number}\n      */\n      height: {\n        type: Number,\n        value: 500\n      }\n    }\n  }\n\n  // Component Lifecycle\n  ready() {\n    this._draw();\n  }\n  // Component Behavior\n\n  /** Main function that draws the graph */\n  _draw() {\n    // Bar chart example from Mike Bostock\n    // http://bl.ocks.org/mbostock/3885304\n    let margin = this.margin;\n    let width = this.width - margin.left - margin.right;\n    let height = this.height - margin.top - margin.bottom;\n\n    let x = d3.scale.ordinal()\n        .rangeRoundBands([0, width], .1);\n\n    let y = d3.scale.linear()\n        .range([height, 0]);\n\n    let xAxis = d3.svg.axis()\n        .scale(x)\n        .orient('bottom');\n\n    let yAxis = d3.svg.axis()\n        .scale(y)\n        .orient('left')\n        .ticks(10, '%');\n\n    let svg = d3.select(this).append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n    d3.tsv(this.url, type, function(error, data) {\n      if (error) { throw error };\n\n      x.domain(data.map(function(d) { return d.letter; }));\n      y.domain([0, d3.max(data, function(d) { return d.frequency; })]);\n\n      svg.append('g')\n          .attr('class', 'x axis')\n          .attr('transform', 'translate(0,' + height + ')')\n          .call(xAxis);\n\n      svg.append('g')\n          .attr('class', 'y axis')\n          .call(yAxis)\n        .append('text')\n          .attr('transform', 'rotate(-90)')\n          .attr('y', 6)\n          .attr('dy', '.71em')\n          .style('text-anchor', 'end')\n          .text('Frequency');\n\n      svg.selectAll('.bar')\n          .data(data)\n        .enter().append('rect')\n          .attr('class', 'bar')\n          .attr('x', function(d) { return x(d.letter); })\n          .attr('width', x.rangeBand())\n          .attr('y', function(d) { return y(d.frequency); })\n          .attr('height', function(d) { return height - y(d.frequency); });\n    });\n\n    function type(d) {\n      d.frequency = +d.frequency;\n      return d;\n    }\n  }\n}\n"],"sourceRoot":"/source/"}